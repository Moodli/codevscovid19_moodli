<h3 id="dataPointCount">Loading...</h3>
<div id="map" style="width: 100%; height: 100%;"></div>
{{!-- Socket io --}}
{{!-- <script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js'>
</script> --}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.dev.js"></script>


<style>
  body {
    padding-bottom: 25px;
    background-color: #073642;
  }

  h3 {
    padding: 0;
    margin: 0;
    color: azure
  }
</style>

<script>

  //websocket connection
  const socket = io.connect('http://127.0.0.1:3005', {
    upgrade: false, transports: ['websocket'], reconnection: true,
    forceNew: false
  });

  mapboxgl.accessToken =
    'pk.eyJ1IjoiYWxnbzciLCJhIjoiY2s4anVka3NnMGt4cjNncGxiYWFzOHFvZiJ9.rZYHg8xF6QahGl0hOaa1cQ';
  var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/dark-v10',
    center: [-96, 37.8],
    buffer: 0,
    zoom: 3,
  });



  //Default data
  let url = 'https://wanderdrone.appspot.com/';
  //When the map loads
  map.on('load', (e) => {

    //Request the data from the backend
    socket.compress(true).emit('firstRender')
    setInterval(() => {
      socket.compress(true).emit('dataRequest')
    }, 5000);

    //Request the data from the backend
    socket.compress(true).emit('firstRenderPointCount')
    setInterval(() => {
      socket.compress(true).emit('dataPoint')
    }, 5000);


    //Listening for incoming data
    socket.on('dataOut', data => {
      //Set the map source
      try {
        map.getSource('tweet').setData(JSON.parse(data));
      }
      catch (err) {
        console.log(err)
      }

    })

    socket.on('dataPoints', data => {
      //Set the map source
      document.getElementById("dataPointCount").innerHTML = 'Data Points Displayed:' + ' ' + data;
    })

    //Initialization
    socket.once('firstRenderData', data => {


      //Set the map source
      try {
        map.getSource('tweet').setData(JSON.parse(data));
      }
      catch (err) {
        console.log(err)
      }

    });

    socket.once('firstRenderPCounts', data => {
      //Set the map source
      document.getElementById("dataPointCount").innerHTML = 'Data Points Displayed:' + ' ' + data;
    })

    map.addSource('tweet',
      {
        type: 'geojson',
        data: url
      });

    map.addLayer({
      'id': 'tweet',
      // 'type': 'symbol',
      'type': 'circle',
      'source': 'tweet',
      'paint': {
        // make circles larger as the user zooms from z12 to z22
        //'circle-radius': {
        // 'base': 10,
        //  'stops': [[3, 5], [12, 10], [22, 180]]
        //},

        'circle-radius': {
          'base': 1.75,
          'stops': [
            [12, 2],
            [22, 180]
          ]
        },
        // https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-match
        'circle-color': [
          'case',

          ['==', ['get', 'sentiment'], 0],
          'yellow',

          ['>', ['get', 'sentiment'], 0],
          'green',

          ['<', ['get', 'sentiment'], 0],
          'red',

/* other */ '#FF0000'
        ]

      }

    });

  });

  map.on('click', (e) => {
    var features = map.queryRenderedFeatures(e.point, {
      layers: ['tweet'] // replace this with the name of the layer

    });

    if (!features.length) {
      return;
    }

    let feature = features[0];

    let popup = new mapboxgl.Popup({ offset: [0, -15] })
      .setLngLat(feature.geometry.coordinates)
      .setHTML('<h3>' + feature.properties.sentiment + '</h3>' + '<p>' + feature.properties.textHuman + '</p>')
      .addTo(map);

  });

  //Fullscreen button
  map.addControl(new mapboxgl.FullscreenControl())

  // Add geolocate control to the map.
  map.addControl(
    new mapboxgl.GeolocateControl({
      positionOptions: {
        enableHighAccuracy: true
      },
      trackUserLocation: true
    })
  );

  // Add zoom and rotation controls to the map.
  map.addControl(new mapboxgl.NavigationControl());


</script>

{{!-- fetch('https://moodli.org:8443/geo')
        .then(res => res.json())
        .then(x => {
          map.getSource('tweet').setData(x);
        }) --}}


{{!-- //Refresh on a 1 sec interval
/*window.setInterval(() => {
}, 1000);*/ --}}