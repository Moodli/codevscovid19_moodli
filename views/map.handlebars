<h3 id="dataPointCount">Loading...</h3>
<h3>Gradient Scale: Green üòÄ > Yellow üòê > Red üôÅ </h3>
<h3>You can click on each point to see the actual tweets</h3>

<div id="map" style="width: 100%; height: 100%;"></div>
{{!-- Socket io --}}

<script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js'>
</script>

<style>
  body {
    padding-bottom: 25px;
    background-color: #073642;
  }

  h3 {
    padding: 0;
    margin: 0;
    color: azure
  }
</style>

<script>

  //websocket connection
  const socket = io.connect('https://www.moodli.org', {
    rade: true, transports: ['websocket'],
    reconnection: true,
    forceNew: false
  });

  mapboxgl.accessToken =
    'pk.eyJ1IjoiYWxnbzciLCJhIjoiY2s4anVka3NnMGt4cjNncGxiYWFzOHFvZiJ9.rZYHg8xF6QahGl0hOaa1cQ';
  var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/dark-v10',
    center: [-96, 37.8],
    buffer: 0,
    zoom: 3,
  });



  //Default data
  let url = 'https://wanderdrone.appspot.com/';
  //When the map loads
  map.on('load', (e) => {

    //Request the data from the backend
    socket.compress(true).emit('firstRender')
    setInterval(() => {
      socket.compress(true).emit('dataRequest')
    }, 5000);

    socket.on('data', data => {
      try {
        map.getSource('tweet').setData(JSON.parse(data[0]));
        document.getElementById("dataPointCount").innerHTML = 'Data Points Displayed:' + ' ' + data[1];
      }
      catch (err) {
        console.log(err)
      }
    })


    //Initialization
    socket.once('firstRenderData', data => {

      //Set the map source
      try {
        map.getSource('tweet').setData(JSON.parse(data[0]));
        document.getElementById("dataPointCount").innerHTML = 'Data Points Displayed:' + ' ' + data[1];
      }
      catch (err) {
        console.log(err)
      }

    });


    // The map source
    map.addSource('tweet',
      {
        type: 'geojson',
        data: url
      });

    // Add the source to the map layer
    map.addLayer({
      'id': 'tweet',
      'type': 'circle',
      'source': 'tweet',
      'paint': {

        // make circles larger as the user zooms from z12 to z22
        'circle-radius': {
          'base': 1,
          'stops': [
            [0, 1],
            [1, 2],
            [2, 3],
            [3, 4],
            [4, 5],
            [5, 6],
            [6, 7],
            [7, 8],
            [8, 9],
            [9, 10],
            [10, 11],
            [11, 12],
            [12, 13],
            [13, 14],
            [14, 15],
            [15, 16],
            [16, 17],
            [17, 18],
            [18, 19],
            [19, 20],
            [20, 21],
            [21, 22],
            [22, 23]
          ]
        },

        'circle-color': [
          'interpolate',
          ['linear'],
          ['get', 'sentiment'],
          -0.2,
          'red',
          0,
          'yellow',
          0.2,
          'green'
        ],
        'circle-opacity': 0.7

      }

    });

  });

  map.on('click', (e) => {
    let features = map.queryRenderedFeatures(e.point, {
      layers: ['tweet'] // replace this with the name of the layer

    });

    if (!features.length) {
      return;
    }

    let feature = features[0];

    let popup = new mapboxgl.Popup({ offset: [0, -15] })
      .setLngLat(feature.geometry.coordinates)
      .setHTML('<h3>' + feature.properties.sentiment + '</h3>' + '<p>' + feature.properties.textHuman + '</p>')
      .addTo(map);

  });

  //Fullscreen button
  map.addControl(new mapboxgl.FullscreenControl())

  // Add geolocate control to the map.
  map.addControl(
    new mapboxgl.GeolocateControl({
      positionOptions: {
        enableHighAccuracy: true
      },
      trackUserLocation: true
    })
  );

  // Add zoom and rotation controls to the map.
  map.addControl(new mapboxgl.NavigationControl());

</script>
{{!-- 
    // https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-match
        //'circle-color': [
        //  'case',
       //   ['==', ['get', 'sentiment'], 0],
         // 'yellow',

      //    ['>', ['get', 'sentiment'], 0],
        //  'green',

        //  ['<', ['get', 'sentiment'], 0],
         // 'red',

///* other */ '#FF0000'
        //] --}}